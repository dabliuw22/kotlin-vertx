import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.jvm'
    //id 'org.jetbrains.kotlin.kapt'
    id 'org.jetbrains.kotlin.plugin.serialization'
    //id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.devtools.ksp'
    id 'org.jmailen.kotlinter'
    id 'com.github.johnrengelman.shadow'
    id 'java'
    id 'groovy'
}

allprojects {
    group 'com.leysoft'
    version '1.0-SNAPSHOT'

    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        //maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    kotlin {
        jvmToolchain(21)
        compilerOptions {
            apiVersion = KotlinVersion.KOTLIN_2_0
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_21
            freeCompilerArgs += "-version"
            freeCompilerArgs += "-script"
        }
    }


    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            verbose = true
            jvmTarget = JavaVersion.VERSION_21
            freeCompilerArgs +=  [
                    "-Xcontext-receivers",
                    "-Xenable-builder-inference",
                    "-version",
                    "-script"
            ]
        }
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_21
    }

    test {
        useJUnitPlatform()
    }

    /* for spek
    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }*/
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'groovy'
    apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
    //apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'com.github.johnrengelman.shadow'
    //apply plugin: 'kotlin-kapt'
    apply plugin: 'com.google.devtools.ksp'

    def ktor_version= "2.3.6"
    def arrow_version = "1.2.4"
    def jackson_version = "2.16.0"
    def kotlin_jdbc_version = "0.5.2"
    def exposed_version = "0.53.0"
    def kotlin_coroutines_version = "1.7.3"
    def postgres_version = "42.7.1"
    def hikari_version = "4.0.3"
    def slf4j_version = "2.0.9"
    def logback_version = "1.4.14"
    def logback_encoder_version = "7.4"
    def spek_version = "2.0.19"
    def kotest_version = "5.8.0"
    def groovy_version = "3.0.9"

    buildscript {
        ext.kotlin_version = '2.0.0'
        repositories {
            mavenCentral()
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
        implementation "io.ktor:ktor-server-core-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-cors-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-default-headers-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-content-negotiation-jvm:$ktor_version"
        implementation "io.ktor:ktor-serialization-kotlinx-json-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-locations-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-call-logging-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-call-id-jvm:$ktor_version"
        implementation "io.ktor:ktor-serialization-jackson-jvm:$ktor_version"
        implementation "io.ktor:ktor-server-netty-jvm:$ktor_version"
        implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-crypt:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-jodatime:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-java-time:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-kotlin-datetime:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-json:$exposed_version"
        implementation "org.jetbrains.exposed:exposed-money:$exposed_version"
        implementation "com.vladsch.kotlin-jdbc:kotlin-jdbc:$kotlin_jdbc_version"
        implementation "org.postgresql:postgresql:$postgres_version"
        implementation "com.zaxxer:HikariCP:$hikari_version"
        implementation "io.arrow-kt:arrow-core:$arrow_version"
        implementation "io.arrow-kt:arrow-optics:$arrow_version"
        implementation "io.arrow-kt:arrow-fx-coroutines:$arrow_version"
        implementation "io.arrow-kt:arrow-fx-stm:$arrow_version"
        ksp "io.arrow-kt:arrow-optics-ksp-plugin:$arrow_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"
        implementation "ch.qos.logback:logback-core:$logback_version"
        implementation "net.logstash.logback:logstash-logback-encoder:$logback_encoder_version"
        implementation "org.codehaus.groovy:groovy-all:$groovy_version"

        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
        testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
        testImplementation "io.kotest:kotest-assertions-core:$kotest_version"
        testImplementation "io.kotest:kotest-property:$kotest_version"
        testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"

        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect" // for spek

        //kapt "io.arrow-kt:arrow-meta:$arrow_version"
    }

    kotlinter {
        failBuildWhenCannotAutoFormat = true
        ignoreFailures = false
        reporters = ['checkstyle', 'plain']
    }

    tasks.named("lintKotlinMain") {
        source = source - fileTree("$buildDir/**/generated/**")
    }

    //kotlin {
    //    kotlinDaemonJvmArgs = [
    //            "-Xcontext-receivers",
    //            "-Xenable-builder-inference"
    //    ]
    //}
}